<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Thnuth - Programming</title><link href="/" rel="alternate"></link><link href="/feeds/programming.atom.xml" rel="self"></link><id>/</id><updated>2019-06-11T00:00:00+08:00</updated><entry><title>Go Module 使用</title><link href="/go-module-shi-yong.html" rel="alternate"></link><published>2019-06-11T00:00:00+08:00</published><updated>2019-06-11T00:00:00+08:00</updated><author><name>Gondnat</name></author><id>tag:None,2019-06-11:/go-module-shi-yong.html</id><summary type="html">&lt;h2&gt;0.开始&lt;/h2&gt;
&lt;p&gt;本文主内容用翻译自&lt;a href="https://blog.golang.org/using-go-modules"&gt;官方博客&lt;/a&gt;，加上在使用过程中遇到的问题&lt;/p&gt;
&lt;h2&gt;1.介绍&lt;/h2&gt;
&lt;p&gt;Go 在1.11 和 1.12 加入了依赖管理 module。一个 module 是一个根目录有个 &lt;strong&gt;go.mod&lt;/strong&gt; 文件的包（package）。 module 不依赖 $GOPATH，不需要将包放到 &lt;em&gt;$GOPATH/src&lt;/em&gt; 目录下。&lt;/p&gt;
&lt;p&gt;在 GO 1.11 里， 如果在工作目录或者其上级目录存在 &lt;strong&gt;go.mod&lt;/strong&gt; 文件，并且不在 &lt;em&gt;$GOPATH/src&lt;/em&gt; 目录下， module 相关命令自动打开。在 &lt;em&gt;$GOPATH/src&lt;/em&gt; 目录下，需要设置环境变量 &lt;strong&gt;&lt;em&gt;export …&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;</summary><content type="html">&lt;h2&gt;0.开始&lt;/h2&gt;
&lt;p&gt;本文主内容用翻译自&lt;a href="https://blog.golang.org/using-go-modules"&gt;官方博客&lt;/a&gt;，加上在使用过程中遇到的问题&lt;/p&gt;
&lt;h2&gt;1.介绍&lt;/h2&gt;
&lt;p&gt;Go 在1.11 和 1.12 加入了依赖管理 module。一个 module 是一个根目录有个 &lt;strong&gt;go.mod&lt;/strong&gt; 文件的包（package）。 module 不依赖 $GOPATH，不需要将包放到 &lt;em&gt;$GOPATH/src&lt;/em&gt; 目录下。&lt;/p&gt;
&lt;p&gt;在 GO 1.11 里， 如果在工作目录或者其上级目录存在 &lt;strong&gt;go.mod&lt;/strong&gt; 文件，并且不在 &lt;em&gt;$GOPATH/src&lt;/em&gt; 目录下， module 相关命令自动打开。在 &lt;em&gt;$GOPATH/src&lt;/em&gt; 目录下，需要设置环境变量 &lt;strong&gt;&lt;em&gt;export GO111MODULE=on&lt;/em&gt;&lt;/strong&gt;,或者在每条语句前面加上 &lt;strong&gt;GO111MODULE=on&lt;/strong&gt;，不然会遇到下面的错误：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;go&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;modules&lt;/span&gt; &lt;span class="n"&gt;disabled&lt;/span&gt; &lt;span class="n"&gt;inside&lt;/span&gt; &lt;span class="n"&gt;GOPATH&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;src&lt;/span&gt; &lt;span class="n"&gt;by&lt;/span&gt; &lt;span class="n"&gt;GO111MODULE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;auto&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;see&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;go help modules&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;在未来的 Go 1.13 版本中， module 会默认打开。&lt;/p&gt;
&lt;h2&gt;2.命令&lt;/h2&gt;
&lt;h3&gt;1.新建一个 module&lt;/h3&gt;
&lt;p&gt;跟新建包一样，只是这次不在 &lt;em&gt;$GOPATH/src&lt;/em&gt; 目录下创建。这次以我写的一个 v2ray 管理 module 为例，可以从&lt;a href="https://github.com/Gondnat/v2raymanager"&gt;这里&lt;/a&gt;找到。&lt;/p&gt;
&lt;p&gt;目录结构如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;span class="err"&gt;├──&lt;/span&gt; &lt;span class="n"&gt;LICENSE&lt;/span&gt;
&lt;span class="err"&gt;├──&lt;/span&gt; &lt;span class="n"&gt;README&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;md&lt;/span&gt;
&lt;span class="err"&gt;├──&lt;/span&gt; &lt;span class="n"&gt;go&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mod&lt;/span&gt;
&lt;span class="err"&gt;├──&lt;/span&gt; &lt;span class="n"&gt;go&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sum&lt;/span&gt;
&lt;span class="err"&gt;├──&lt;/span&gt; &lt;span class="n"&gt;states&lt;/span&gt;
&lt;span class="err"&gt;│&lt;/span&gt;   &lt;span class="err"&gt;├──&lt;/span&gt; &lt;span class="n"&gt;states&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;go&lt;/span&gt;
&lt;span class="err"&gt;│&lt;/span&gt;   &lt;span class="err"&gt;└──&lt;/span&gt; &lt;span class="n"&gt;states_test&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;go&lt;/span&gt;
&lt;span class="err"&gt;└──&lt;/span&gt; &lt;span class="n"&gt;usermanager&lt;/span&gt;
    &lt;span class="err"&gt;├──&lt;/span&gt; &lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;go&lt;/span&gt;
    &lt;span class="err"&gt;├──&lt;/span&gt; &lt;span class="n"&gt;remove&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;go&lt;/span&gt;
    &lt;span class="err"&gt;└──&lt;/span&gt; &lt;span class="n"&gt;usermanager_test&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;go&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;2.生成 &lt;strong&gt;go.mod&lt;/strong&gt; 文件，添加依赖&lt;/h3&gt;
&lt;p&gt;首先在根目录运行&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ go mod init github.com/Gondnat/v2raymanager
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;生成 &lt;strong&gt;go.mod&lt;/strong&gt; 文件，此时文件里只有 module 名和 Go 版本号&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;module&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;github&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Gondnat&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;v2raymanager&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="k"&gt;go&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;1.12&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;分别进入 states 和 usermanager 目录，运行&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ go &lt;span class="nb"&gt;test&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;此时应该获得类似下面的输出,&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ go &lt;span class="nb"&gt;test&lt;/span&gt;
go: finding github.com/golang/protobuf/proto latest
go: finding v2ray.com/core/testing/scenarios latest
...
PASS
ok      github.com/Gondnat/v2raymanager/states  &lt;span class="m"&gt;3&lt;/span&gt;.666s
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;此时 &lt;strong&gt;go.mod&lt;/strong&gt; 内容应该已经变成如下，并且生成了 &lt;strong&gt;go.sum&lt;/strong&gt; 文件, 用来存放校验值（如果没有变化，如果是在 &lt;em&gt;$GOPATH/src&lt;/em&gt; 目录下，要设置环境变量 &lt;strong&gt;&lt;em&gt;GO111MODULE=on&lt;/em&gt;&lt;/strong&gt;，这里 go test 并不会提示错误。）。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ cat go.mod
module github.com/Gondnat/v2raymanager

go &lt;span class="m"&gt;1&lt;/span&gt;.12

require &lt;span class="o"&gt;(&lt;/span&gt;
    github.com/golang/protobuf v1.3.1
    google.golang.org/grpc v1.21.1
    v2ray.com/core v4.15.0+incompatible
&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ cat go.sum 
cloud.google.com/go v0.26.0/go.mod h1:aQUYkXzVsufM+DwF1aE+0xfcU+56JwCaLick0ClmMTw&lt;span class="o"&gt;=&lt;/span&gt;
github.com/BurntSushi/toml v0.3.1/go.mod h1:xHWCNGjB5oqiDr8zfno3MHue2Ht5sIBksp03qcyfWMU&lt;span class="o"&gt;=&lt;/span&gt;
github.com/client9/misspell v0.3.4/go.mod h1:qj6jICC3Q7zFZvVWo7KLAzC3yx5G7kyvSDkc90ppPyw&lt;span class="o"&gt;=&lt;/span&gt;
...
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;3.其他操作&lt;/h3&gt;
&lt;h4&gt;显示所有依赖&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ go list -m all
github.com/Gondnat/v2raymanager
cloud.google.com/go v0.26.0
github.com/BurntSushi/toml v0.3.1
...
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;升级依赖&lt;/h4&gt;
&lt;p&gt;比如我们想升级上面列出来的依赖 &lt;em&gt;github.com/BurntSushi/toml&lt;/em&gt;， 运行 go get：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ go get github.com/BurntSushi/toml
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;删除无用依赖&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ go mod tidy
&lt;/pre&gt;&lt;/div&gt;</content></entry><entry><title>单例的实现</title><link href="/dan-li-de-shi-xian.html" rel="alternate"></link><published>2016-08-25T00:00:00+08:00</published><updated>2016-08-25T00:00:00+08:00</updated><author><name>Gondnat</name></author><id>tag:None,2016-08-25:/dan-li-de-shi-xian.html</id><summary type="html">&lt;h2&gt;0. 前言&lt;/h2&gt;
&lt;p&gt;最近在面试iOS，被问到单例，我当时就蒙（这个名字似曾相识，但是真的其想不起啦，背景本人Objtive-C完全是照着将Category翻译成类别的书本和Apple的官方文档学的）。后来晚上回家上网搜了搜，这不就是单一实例对象么。讲真，我用这个功能完全是我懒得一遍遍的写alloc＋init。&lt;/p&gt;
&lt;h2&gt;1.Objective-C下的实现&lt;/h2&gt;
&lt;p&gt;因为这个问题是在面试iOS被问到，所以先写Objective-C下的，也是最蛋疼的一个。看看C++有多好写就知道了。
最简单的写法：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kt"&gt;id&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;@implementation&lt;/span&gt; &lt;span class="nc"&gt;ClassA&lt;/span&gt;

&lt;span class="p"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;instancetype&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nf"&gt;shareA&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nb"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;A&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="nb"&gt;self&lt;/span&gt; &lt;span class="n"&gt;alloc&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="n"&gt;init&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;@end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;解释： id A是个全局变量，程序运行时候，全局变量被创建，注意这里A是个指针，我说的创建是指针变量被创建，就是存储指针的变量被创建，不是A指向的ClassA对象被创建。&lt;/p&gt;
&lt;p&gt;这个指针是最简单的实现，只是图自己方便，不考虑被非法使用，比方说extern一下A …&lt;/p&gt;</summary><content type="html">&lt;h2&gt;0. 前言&lt;/h2&gt;
&lt;p&gt;最近在面试iOS，被问到单例，我当时就蒙（这个名字似曾相识，但是真的其想不起啦，背景本人Objtive-C完全是照着将Category翻译成类别的书本和Apple的官方文档学的）。后来晚上回家上网搜了搜，这不就是单一实例对象么。讲真，我用这个功能完全是我懒得一遍遍的写alloc＋init。&lt;/p&gt;
&lt;h2&gt;1.Objective-C下的实现&lt;/h2&gt;
&lt;p&gt;因为这个问题是在面试iOS被问到，所以先写Objective-C下的，也是最蛋疼的一个。看看C++有多好写就知道了。
最简单的写法：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kt"&gt;id&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;@implementation&lt;/span&gt; &lt;span class="nc"&gt;ClassA&lt;/span&gt;

&lt;span class="p"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;instancetype&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nf"&gt;shareA&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nb"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;A&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="nb"&gt;self&lt;/span&gt; &lt;span class="n"&gt;alloc&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="n"&gt;init&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;@end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;解释： id A是个全局变量，程序运行时候，全局变量被创建，注意这里A是个指针，我说的创建是指针变量被创建，就是存储指针的变量被创建，不是A指向的ClassA对象被创建。&lt;/p&gt;
&lt;p&gt;这个指针是最简单的实现，只是图自己方便，不考虑被非法使用，比方说extern一下A，还有就是多线程可能存在两个线程同时调用shareA，结果生成两份A。&lt;/p&gt;
&lt;p&gt;对于第一个extern的问题，添加static就可以限制被在其他源码文件中使用，但是请注意我这个A是在.m文件中创建的，所以你要是跑到.h声明的话，加了static，那可就是N份A了。如果你实在不太明白，请补习一下C的知识。&lt;/p&gt;
&lt;p&gt;多线程的问题，加锁就可以。So easy。&lt;/p&gt;
&lt;p&gt;在考虑到extern和多线程情况下，代码就改成这样：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;id&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;@implementation&lt;/span&gt; &lt;span class="nc"&gt;ClassA&lt;/span&gt;

&lt;span class="p"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;instancetype&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nf"&gt;shareA&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;@synchronized&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nb"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;A&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="nb"&gt;self&lt;/span&gt; &lt;span class="n"&gt;alloc&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="n"&gt;init&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;@end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;当然网上有好多把copyWithZone，allocWithZone也重写，比方说这个&lt;a href="http://www.cocoachina.com/cms/wap.php?action=article&amp;amp;id=16661"&gt;http://www.cocoachina.com/cms/wap.php?action=article&amp;amp;id=16661&lt;/a&gt;， 对于互斥锁可以参考Apple的官方文档&lt;a href="https://developer.apple.com/library/ios/documentation/Cocoa/Conceptual/Multithreading/ThreadSafety/ThreadSafety.html"&gt;https://developer.apple.com/library/ios/documentation/Cocoa/Conceptual/Multithreading/ThreadSafety/ThreadSafety.html&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;2.C++, Swift&lt;/h2&gt;
&lt;p&gt;昨天面试一下C++，好久没正经写过C++了，有点手生，面试官也让写个C++的单例，当时还想着Objective-C的单例，就写了下面这个&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;class&lt;/span&gt; &lt;span class="nv"&gt;ClassA&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;
&lt;span class="nv"&gt;static&lt;/span&gt; &lt;span class="nv"&gt;ClassA&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nv"&gt;A&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;NULL&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;
&lt;span class="nv"&gt;class&lt;/span&gt; &lt;span class="nv"&gt;ClassA&lt;/span&gt; {
&lt;span class="nv"&gt;public&lt;/span&gt;:
    &lt;span class="nv"&gt;static&lt;/span&gt; &lt;span class="nv"&gt;ClassA&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nv"&gt;sharedA&lt;/span&gt;&lt;span class="ss"&gt;()&lt;/span&gt; {
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;NULL&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nv"&gt;A&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt; {
            &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nv"&gt;A&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;ClassA&lt;/span&gt;&lt;span class="ss"&gt;()&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;
        }
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;A&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;
    }
}&lt;span class="c1"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这个样写倒也没啥，就是你还得添加线程锁，太麻烦。后来回到家里，翻了下《C++ Primer》，看看拷贝构造函数（复制构造函数），和赋值函数（好吧，我承认我比较水，被问到这个的时候，我就没答得很好，就凭印象说了一通)。想来，Objective-C只有对象指针，C++可不是。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;class&lt;/span&gt; &lt;span class="nv"&gt;ClassA&lt;/span&gt; {
&lt;span class="nv"&gt;public&lt;/span&gt;:
    &lt;span class="nv"&gt;static&lt;/span&gt; &lt;span class="nv"&gt;ClassA&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nv"&gt;sharedA&lt;/span&gt;&lt;span class="ss"&gt;()&lt;/span&gt; {
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;A&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;
    }&lt;span class="c1"&gt;;&lt;/span&gt;
&lt;span class="nv"&gt;private&lt;/span&gt;:
    &lt;span class="nv"&gt;static&lt;/span&gt; &lt;span class="nv"&gt;ClassA&lt;/span&gt; &lt;span class="nv"&gt;A&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;
}&lt;span class="c1"&gt;;&lt;/span&gt;

&lt;span class="nv"&gt;ClassA&lt;/span&gt; &lt;span class="nv"&gt;ClassA&lt;/span&gt;::&lt;span class="nv"&gt;A&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;ClassA&lt;/span&gt;&lt;span class="ss"&gt;()&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Swift就更简单了，你要用的时候它已经安安静静的在那里等你了。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="n"&gt;ClassA&lt;/span&gt; {
    &lt;span class="n"&gt;static&lt;/span&gt; &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;sharedA&lt;/span&gt; = &lt;span class="n"&gt;ClassA&lt;/span&gt;()
}
&lt;/pre&gt;&lt;/div&gt;</content></entry><entry><title>Build C Language Library for Android</title><link href="/build-c-language-library-for-android.html" rel="alternate"></link><published>2016-07-03T00:00:00+08:00</published><updated>2016-07-03T00:00:00+08:00</updated><author><name>Gondnat</name></author><id>tag:None,2016-07-03:/build-c-language-library-for-android.html</id><summary type="html">&lt;h3&gt;0.Introduction&lt;/h3&gt;
&lt;p&gt;Android apps are written in Java, Java have provide &lt;a href="http://en.wikipedia.org/wiki/Java_Native_Interface"&gt;JNI(Java Native Interface)&lt;/a&gt; to call or be called by native applications and libraries written in other language such as C/C++ and assembly. Android provide NDK(Native Development Kit) to support native development in C/C++.&lt;/p&gt;
&lt;h3&gt;1.Installing …&lt;/h3&gt;</summary><content type="html">&lt;h3&gt;0.Introduction&lt;/h3&gt;
&lt;p&gt;Android apps are written in Java, Java have provide &lt;a href="http://en.wikipedia.org/wiki/Java_Native_Interface"&gt;JNI(Java Native Interface)&lt;/a&gt; to call or be called by native applications and libraries written in other language such as C/C++ and assembly. Android provide NDK(Native Development Kit) to support native development in C/C++.&lt;/p&gt;
&lt;h3&gt;1.Installing NDK&lt;/h3&gt;
&lt;p&gt;The NDK can be download from &lt;a href="http://developer.android.com/tools/sdk/ndk/index.html"&gt;Android Developer Website&lt;/a&gt;. After downloaded, we get an archive package, unpack it to whereever you want, and replace the full path with &lt;em&gt;&lt;code&gt;&amp;lt;NDK-Path&amp;gt;&lt;/code&gt;&lt;/em&gt; in below.&lt;/p&gt;
&lt;h3&gt;2.Use Mobile Print Project as an example&lt;/h3&gt;
&lt;p&gt;Step 0: Read &lt;em&gt;&lt;NDK-Path&gt;/docs/OVERVIEW.html&lt;/em&gt; is helpful to understand the below steps.&lt;/p&gt;
&lt;p&gt;Step 1: Create a project directory named "exampleProject", and a subdir named "jni", copy the C/C++ code to "jni"&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;exampleProject can be change whatever you want&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Step 2: Create a file named "Android.mk", contains is likely as follow:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;LOCAL_PATH&lt;/span&gt; :&lt;span class="o"&gt;=&lt;/span&gt; $&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="k"&gt;call&lt;/span&gt; &lt;span class="nl"&gt;my&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;dir&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;include&lt;/span&gt; $&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;CLEAR_VARS&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
&lt;span class="nv"&gt;LOCAL_MODULE&lt;/span&gt; :&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;PMX_MobilePrinter&lt;/span&gt;
&lt;span class="nv"&gt;LOCAL_SRC_FILES&lt;/span&gt; :&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;test&lt;/span&gt;.&lt;span class="nv"&gt;c&lt;/span&gt; \
&lt;span class="nv"&gt;test1&lt;/span&gt;.&lt;span class="nv"&gt;c&lt;/span&gt;
&lt;span class="nv"&gt;LOCAL_C_INCLUDES&lt;/span&gt; :&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;test&lt;/span&gt;.&lt;span class="nv"&gt;h&lt;/span&gt;
&lt;span class="k"&gt;include&lt;/span&gt; $&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;BUILD_STATIC_LIBRARY&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The last line means, the output will be a static library, BUILD_SHARED_LIBRARY is for shared library.&lt;/p&gt;
&lt;h3&gt;3.Build for different platform&lt;/h3&gt;
&lt;p&gt;By default, the library is build for arm.Platforms are define in file "&lt;code&gt;Application.mk&lt;/code&gt;" under &lt;em&gt;jni&lt;/em&gt; directory, contains as follow:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;APP_ABI&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;all&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We need build for all platform, so the value after APP_ABI is &lt;code&gt;all&lt;/code&gt;, which can be changed to &lt;code&gt;armabi/armabi-v7a/x86/mips&lt;/code&gt;. Need to support different platform one time, just write as below, split with blank space.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;APP_ABI&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;armabi&lt;/span&gt; &lt;span class="n"&gt;armabi&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;v7a&lt;/span&gt; &lt;span class="n"&gt;x86&lt;/span&gt; &lt;span class="n"&gt;mips&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;4.Build the library&lt;/h3&gt;
&lt;p&gt;Go to the "jni", run build command &lt;em&gt;&lt;NDK-path&gt;/ndk-build&lt;/em&gt; in Terminal(Mac/Linux)/CMD(Windows). Then you will find our library in &lt;em&gt;&lt;code&gt;exampleProject/obj/local/&amp;lt;PlatformName&amp;gt;/libPMX_MobilePrinter.a&lt;/code&gt;&lt;/em&gt;. Build shared library is placed in &lt;em&gt;&lt;code&gt;exampleProject/libs/&amp;lt;PlatformName&amp;gt;/libPMX_MobilePrinter.so&lt;/code&gt;&lt;/em&gt;.&lt;/p&gt;</content></entry><entry><title>Markdown in Emacs</title><link href="/markdown-in-emacs.html" rel="alternate"></link><published>2014-08-20T00:00:00+08:00</published><updated>2014-08-20T00:00:00+08:00</updated><author><name>Gondnat</name></author><id>tag:None,2014-08-20:/markdown-in-emacs.html</id><summary type="html">&lt;p&gt;简单的一个笔记,我在OS X下的Emacs的Markdown配置&lt;/p&gt;
&lt;p&gt;1.下载&lt;a href="http://jblevins.org/projects/markdown-mode/"&gt;Markdown-Model&lt;/a&gt;，按照网页中的介绍下载、添加启动到.emacs文件中，这里有个问题是总是提示找不到markdown-mode文件，我的解决方法是，git clone 到\~/.emacs.d下，会在.emcas.d目录下生成一个markdown-mode目录，添加\~/.emacs.d/markdown-mode到load-path。最终调用markdown-mode的配置部分如下&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;;;Markdown-Mode&lt;/span&gt;
&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;add&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;to&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;list&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="s"&gt;load-path &amp;quot;~/.emacs.d/markdown-mode/&amp;quot;)&lt;/span&gt;
&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;autoload&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="s"&gt;markdown-mode &amp;quot;markdown-mode&amp;quot; &amp;quot;Major mode for editing Markdown files&amp;quot; t)&lt;/span&gt;
&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;add&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;to&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;list&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="s"&gt;auto-mode-alist &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="s"&gt;.markdown&lt;/span&gt;&lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;. &lt;span class="nv"&gt;markdown&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;mode&lt;/span&gt;&lt;span class="ss"&gt;))&lt;/span&gt;
&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;add …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;简单的一个笔记,我在OS X下的Emacs的Markdown配置&lt;/p&gt;
&lt;p&gt;1.下载&lt;a href="http://jblevins.org/projects/markdown-mode/"&gt;Markdown-Model&lt;/a&gt;，按照网页中的介绍下载、添加启动到.emacs文件中，这里有个问题是总是提示找不到markdown-mode文件，我的解决方法是，git clone 到\~/.emacs.d下，会在.emcas.d目录下生成一个markdown-mode目录，添加\~/.emacs.d/markdown-mode到load-path。最终调用markdown-mode的配置部分如下&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;;;Markdown-Mode&lt;/span&gt;
&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;add&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;to&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;list&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="s"&gt;load-path &amp;quot;~/.emacs.d/markdown-mode/&amp;quot;)&lt;/span&gt;
&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;autoload&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="s"&gt;markdown-mode &amp;quot;markdown-mode&amp;quot; &amp;quot;Major mode for editing Markdown files&amp;quot; t)&lt;/span&gt;
&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;add&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;to&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;list&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="s"&gt;auto-mode-alist &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="s"&gt;.markdown&lt;/span&gt;&lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;. &lt;span class="nv"&gt;markdown&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;mode&lt;/span&gt;&lt;span class="ss"&gt;))&lt;/span&gt;
&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;add&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;to&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;list&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="s"&gt;auto-mode-alist &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="s"&gt;.md&lt;/span&gt;&lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;. &lt;span class="nv"&gt;markdown&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;mode&lt;/span&gt;&lt;span class="ss"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;2.经过上面的设置在Emacs中打开.md或是.markdown的文件，就可以有高亮显示并可以有多中快捷键使用，可参考markdown-mode的主页，也就是上面的下载页面。现在如果你使用C-c C-c p预览，或是C-c C-c m生成html，会提示没有markdown这个命令。这里使用&lt;a href="http://brew.sh"&gt;Homebrew&lt;/a&gt;安装pandoc，使用pandoc将Markdown转换成html。创建一个名为markdown的脚本文件，内容如下，将其拷贝到/bin或/usr/bin目录下，并赋予可执行权限。至此就可以正常使用预览功能。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;usr&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="k"&gt;local&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;bin&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;pandoc&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="n"&gt;markdown&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="n"&gt;html&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="c1"&gt;--mathjax --highlight-style pygments $1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;参考：&lt;a href="http://panqiincs.github.io/blog/2013/05/03/emacs-markdown-mode/"&gt;http://panqiincs.github.io/blog/2013/05/03/emacs-markdown-mode/&lt;/a&gt;&lt;/p&gt;</content></entry></feed>